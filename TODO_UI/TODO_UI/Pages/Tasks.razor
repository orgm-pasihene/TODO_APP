@page "/tasks"

@using Newtonsoft.Json.Serialization
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory ClientFactory
@inject Microsoft.Extensions.Configuration.IConfiguration config
@inject IJSRuntime JS
@using BlazorInputFile
@using System.IO


<button type="button"
        class="btn btn-primary m-2 float-end"
        data-bs-toggle="modal"
        data-bs-target="#exampleModal"
        @onclick="addClick">
    Add Task
</button>

<table class="table table-striped">

    <thead> 
        <tr>
            <th>TaskID</th>
            <th>TaskTitle</th>
            <th>TaskDetails</th>
            <th>DateAdded</th>
        </tr>     
    </thead>

    <tbody>
        @foreach (var tsk in tasks)
        {
            <tr>
                <td>@tsk.TaskID</td>
                <td>@tsk.TaskTitle</td>
                <td>@tsk.TaskDetails</td>
                <td>@tsk.DateAdded</td>

                <td>

                    <button type="button" class="btn btn-light" mr-1
                            data-bs-toggle="modal"
                            data-bs-target="#exampleModal"
                            @onclick="(()=> editClick(tsk))">

                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-square" viewBox="0 0 16 16">
                            <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z" />
                            <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z" />
                        </svg>
                    </button>

                    <button type="button" class="btn btn-light" mr-1
                             @onclick="(()=> deleteClick(tsk.TaskID))">
                     
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash-fill" viewBox="0 0 16 16">
                            <path d="M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1H2.5zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5zM8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5zm3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0z" />
                        </svg>
                    </button>
                </td>
            </tr>
        }

    </tbody>
</table>

<div class="modal fade" id="exampleModal" tabindex="-1"
     aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">

            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">@modalTitle</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="modal-body">

                <div class="d-flex flex-row bd-highlight mb-3">
                    <div class="p-2 w-50 bd-highlight">
                        <div class="input-group mb-3">
                            <span class="input-group-text">Title</span>
                            <input type="text" class="form-control" @bind="TaskTitle" />
                        </div>
                       
                        <div class="input-group mb-3">
                            <span class="input-group-text">Details</span>
                            <input type="text" class="form-control" @bind="TaskDetails" />
                        </div>

                        <div class="input-group mb-3">
                            <span class="input-group-text">Date Added</span>
                            <input type="date" class="form-control" @bind="DateAdded" />
                        </div>
                    </div>

                </div>

                    @if (modalTitle == "Add Task")
                    {
                        <button type="button" class="btn btn-primary" @onclick="createClick">
                            Create
                        </button>
                    }
                    else
                    {
                        <button type="button" class="btn btn-primary" @onclick="updateClick">
                            Update
                        </button>
                    }

                </div>

        </div>
    </div>
</div>

@code{
    public class TasksClass
    {
        public int TaskID { get; set; }
        public string TaskTitle { get; set; }
        public string TaskDetails { get; set; }
        public string DateAdded { get; set; }

        //public System.Text.Json.JsonNamingPolicy? PropertyNamingPolicy { get; set; }
    }

    private IEnumerable<TasksClass> tasks = Array.Empty<TasksClass>();

    private string modalTitle;
    private int TaskID;
    private string TaskTitle;
    private string TaskDetails;
    private DateTime DateAdded;

    protected override async Task OnInitializedAsync()
    {
        await refreshList();
    }

    private async Task refreshList()
    {
        var request  = new HttpRequestMessage(HttpMethod.Get,
            config["API_URL"] + "Tasks");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        using var responseStream = await response.Content.ReadAsStreamAsync();

        tasks = await JsonSerializer.DeserializeAsync<IEnumerable<TasksClass>>(responseStream);
    }

    // Create click
    private async Task createClick()
    {
        var tskObj = new TasksClass()
            {
                TaskTitle = TaskTitle,
                TaskDetails = TaskDetails,
                DateAdded = DateAdded.ToString("yyyy-MM-dd")
            };

        var request = new HttpRequestMessage(HttpMethod.Post,
            config["API_URL"] + "Tasks/AddTasks");

        request.Content = new StringContent(JsonSerializer.Serialize(tskObj), null, "application/json");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        using var responseStream = await response.Content.ReadAsStreamAsync();
        string res = await JsonSerializer.DeserializeAsync<string>(responseStream);

        await JS.InvokeVoidAsync("alert", res);

        await refreshList();
    }

    // Edit click
    private async Task updateClick()
    {
        var tskObj = new TasksClass()
            {
                TaskTitle = TaskTitle,
                TaskDetails = TaskDetails,
                DateAdded = DateAdded.ToString("yyyy-MM-dd")
            };

        var request = new HttpRequestMessage(HttpMethod.Put,
            config["API_URL"] + "Tasks/updateTasks");

        request.Content = new StringContent(JsonSerializer.Serialize(tskObj), null, "application/json");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        using var responseStream = await response.Content.ReadAsStreamAsync();
        string res = await JsonSerializer.DeserializeAsync<string>(responseStream);

        await JS.InvokeVoidAsync("alert", res);

        await refreshList();
    }

    //Delete click
    private async Task deleteClick(int id)
    {
        if (!await JS.InvokeAsync<bool>("confirm", "Are you sure?"))
        {
            return;
        }

        var request = new HttpRequestMessage(HttpMethod.Delete,
            config["API_URL"] + "Tasks/deletetask" + id.ToString());

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        using var responseStream = await response.Content.ReadAsStreamAsync();
        string res = await JsonSerializer.DeserializeAsync<string>(responseStream);

        await JS.InvokeVoidAsync("alert", res);

        await refreshList();
    }

    private void addClick()
    {
        modalTitle = "Add Task";
        TaskTitle = "";
        TaskDetails = "";
        DateAdded = DateTime.Now;
    }

    private void editClick(TasksClass tsk)
    {
        modalTitle = "Edit Task";
        TaskTitle = tsk.TaskTitle;
        TaskDetails = tsk.TaskDetails;
    }

}